/* Code by Aneliya Abdimalik */
/* Student ID: 2547651 */

.pos 0x0

    irmovq stack, %rsp          /* Setting up the stack pointer */
    irmovq head, %rdi           /* Getting the address of the list's head */
    call selection_sort_rec     /* Calling the recursive selection sort function */
    halt                        /* Ending the program */

.pos 0x300
head:
    .quad 17
    .quad node1
node1:
    .quad 24
    .quad node2
node2:
    .quad 6
    .quad node3
node3:
    .quad 11
    .quad node4
node4:
    .quad 4
    .quad node5
node5:
    .quad 5
    .quad node6
node6:
    .quad 3
    .quad node7
node7:
    .quad 40
    .quad node8
node8:
    .quad 19
    .quad node9
node9:
    .quad 52
    .quad node10
node10:
    .quad 8
    .quad 0  /* NULL indicates the end of the list */


selection_sort_rec:
    pushq %rbp                  /* Save the current base pointer */
    rrmovq %rsp, %rbp           /* Set up the new base pointer */
    irmovq $40, %r14            /* Allocate space for local variables */
    subq %r14, %rsp

    rmmovq %rdi, -8(%rbp)       /* Store head in the local variable */

    mrmovq -8(%rbp), %rax       /* Check base case: if head == NULL */
    andq %rax, %rax
    je base_case_return         /* If true, return */

    mrmovq 8(%rax), %rax        /* Check base case: if head->next == NULL */
    andq %rax, %rax
    je base_case_return         /* If true, return */

    mrmovq -8(%rbp), %r10       /* Initialize min = head */
    rmmovq %r10, -16(%rbp)

    irmovq $0, %r10             /* Initialize prevMin = NULL */
    rmmovq %r10, -24(%rbp)

    mrmovq -8(%rbp), %r10       /* Initialize curr = head */
    rmmovq %r10, -32(%rbp)

search_min_for:
    mrmovq -32(%rbp), %r10      /* Check if curr->next exists */
    mrmovq 8(%r10), %r11
    andq %r11, %r11
    je end_search_min_for       /* Exit loop if curr->next is NULL */

    /* Compare curr->next->data with min->data */
    mrmovq -16(%rbp), %r8       /* Load min->data */
    mrmovq (%r8), %r8

    mrmovq (%r11), %r9          /* Load curr->next->data */
    subq %r8, %r9
    jge search_min_for_if_skip  /* Skip if curr->next->data >= min->data */

    rmmovq %r11, -16(%rbp)      /* Update min = curr->next */
    rmmovq %r10, -24(%rbp)      /* Update prevMin = curr */

search_min_for_if_skip:
    mrmovq -32(%rbp), %r10      /* Move curr to curr->next */
    mrmovq 8(%r10), %r10
    rmmovq %r10, -32(%rbp)

    jmp search_min_for          /* Continue searching for min */

end_search_min_for:
    mrmovq -8(%rbp), %r10       /* Check if head == min */
    mrmovq -16(%rbp), %r11      /* min */
    rrmovq %r11, %rax
    subq %r10, %rax
    je skip_swap                /* Skip swapping if head == min */

    /* Swap head and min nodes */
    mrmovq -8(%rbp), %rdi
    mrmovq 8(%rdi), %rsi
    rmmovq %rsi, -40(%rbp)      /* temp = head->next */

    mrmovq -16(%rbp), %rsi
    mrmovq 8(%rsi), %r11
    mrmovq -8(%rbp), %rdi
    rmmovq %r11, 8(%rdi)        /* head->next = min->next */

    /* Check if temp == min */
    mrmovq -40(%rbp), %rsi      /* temp */
    mrmovq -16(%rbp), %rdi      /* min */
    rrmovq %rsi, %rax
    subq %rdi, %rax
    jne temp_min_not_equal

    mrmovq -8(%rbp), %r10       /* head */
    rmmovq %r10, 8(%rdi)        /* min->next = head */
    jmp after_swap

temp_min_not_equal:
    mrmovq -40(%rbp), %rsi      /* temp */
    mrmovq -16(%rbp), %rdi      /* min */
    rmmovq %rsi, 8(%rdi)
    mrmovq -24(%rbp), %rdi      /* prevMin */
    mrmovq -8(%rbp), %rsi       /* head */
    rmmovq %rsi, 8(%rdi)

after_swap:
    mrmovq -16(%rbp), %rax      /* Update head to min */
    rmmovq %rax, -8(%rbp)

skip_swap:
    mrmovq -8(%rbp), %rax       /* Load head */
    mrmovq 8(%rax), %rdi        /* head->next */

    call selection_sort_rec     /* Recur for the rest of the list */

    mrmovq -8(%rbp), %rdi       /* Restore head */
    rmmovq %rax, 8(%rdi)

    mrmovq -8(%rbp), %rax       /* Return updated head */
    irmovq $40, %r14
    addq %r14, %rsp
    popq %rbp
    ret

base_case_return:
    mrmovq -8(%rbp), %rax       /* Return head */
    irmovq $40, %r14
    addq %r14, %rsp
    popq %rbp
    ret

.pos 0x990
stack:

